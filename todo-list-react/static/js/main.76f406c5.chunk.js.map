{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","title","todos","id","todoInput","isUpdating","handleChange","bind","handleSubmit","JSON","parse","sessionStorage","getItem","this","setState","setItem","stringify","textInput","focus","name","index","findIndex","item","updateTodos","updateTodoName","push","length","completed","event","target","value","addNewTodo","preventDefault","splice","className","href","src","logo","alt","height","onSubmit","onChange","required","type","maxLength","placeholder","autoFocus","ref","input","onClick","map","todo","key","updateTodoCompletion","editTodoName","deleteTodo","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76f406c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './logo.svg';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      title: 'My Todos',\n      todos: [],\n      id: 0,\n      todoInput: '',\n      isUpdating: false\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    let todos = JSON.parse(sessionStorage.getItem('todos'));\n    this.setState({ todos: todos || [] });\n  }\n\n  updateTodos() {\n    sessionStorage.setItem('todos', JSON.stringify(this.state.todos));\n    this.setState({ todoInput: '' });\n    this.textInput.focus();\n  }\n\n  editTodoName(id, name) {\n    this.textInput.focus();\n    this.setState({ id, todoInput: name, isUpdating: true });\n  }\n\n  updateTodoName() {\n    const index = this.state.todos.findIndex(item => item.id === this.state.id);\n\n    // eslint-disable-next-line react/no-direct-mutation-state\n    this.state.todos[index].name = this.state.todoInput;\n    this.updateTodos();\n    this.setState({ isUpdating: false })\n  }\n\n  addNewTodo() {\n    if (this.state.isUpdating) this.updateTodoName();\n    else this.state.todos.push({ id: this.state.todos.length, name: this.state.todoInput, completed: false });\n    this.updateTodos();\n  }\n\n  handleChange(event) {\n    this.setState({ todoInput: event.target.value })\n  }\n\n  handleSubmit(event) {\n    this.addNewTodo();\n    event.preventDefault();\n  }\n\n  updateTodoCompletion(id) {\n    const index = this.state.todos.findIndex((item) => item.id === id);\n\n    // eslint-disable-next-line react/no-direct-mutation-state\n    this.state.todos[index].completed = !this.state.todos[index].completed;\n    this.updateTodos();\n  }\n\n  deleteTodo(id) {\n    const index = this.state.todos.findIndex(item => item.id === id);\n    this.state.todos.splice(index, 1);\n    this.updateTodos();\n  }\n\n  render() {\n    return (\n      <div id=\"todo-list\" className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-8 mx-auto\">\n            <h1 className=\"text-center display-4\">{this.state.title}</h1>\n            <div className=\"text-center sub-header\">\n              Built with<a href=\"https://reactjs.org/\"><img src={logo} alt=\"\" height=\"25\" /></a>\n            </div>\n            <form className=\"input-group\" onSubmit={this.handleSubmit}>\n              <input\n                value={this.state.todoInput}\n                onChange={this.handleChange}\n                required \n                type=\"text\"\n                maxLength=\"50\"\n                className=\"col-md-10 form-control\"\n                placeholder=\"New Todo\"\n                autoFocus\n                ref={input => this.textInput = input}\n              />\n\n              <button\n                type=\"button\"\n                className={`input-group-append btn ${ !this.state.isUpdating ? 'btn-success' : 'btn-primary' } col-md-2 font-weight-bold`}\n                onClick={this.handleSubmit}\n              >\n                {!this.state.isUpdating ? 'Submit' : 'Update'}\n              </button>\n\n            </form>\n\n            <table className=\"table table-sm table-dark\">\n              {this.state.todos.map(todo =>\n                <tbody key={todo.id}>\n                  <tr>\n                    <td className=\"form-control-lg\">\n                      <button\n                        className={`btn ${todo.completed ? 'btn-success' : 'btn-secondary'}`}\n                        title=\"Click to mark as complete\"\n                        onClick={() => this.updateTodoCompletion(todo.id)}\n                      >\n                        <span className=\"fa fa-check\"></span>\n                      </button>\n                      <span className=\"todo-name\">{todo.name}</span>\n                    </td>\n\n                    <td className=\"text-right\">\n\n                      <button\n                        className=\"btn btn-primary update-todo-btn\"\n                        title=\"Update Todo\"\n                        onClick={() => this.editTodoName(todo.id, todo.name)}\n                      >\n                        <span className=\"fa fa-edit\"></span>\n                      </button>\n\n                      <button\n                        className=\"btn btn-danger\"\n                        title=\"Delete Todo\"\n                        onClick={() => this.deleteTodo(todo.id)}\n                      >\n                        <span className=\"fa fa-trash\"></span>\n                      </button>\n                    </td>\n                  </tr>\n                </tbody>\n              )}\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}